// Mocks generated by Mockito 5.4.6 from annotations
// in chatapp/test/call_screen_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chatapp/services/call/call_manager.dart' as _i2;
import 'package:chatapp/services/call/call_models.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [CallManagerInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockCallManagerInterface extends _i1.Mock
    implements _i2.CallManagerInterface {
  MockCallManagerInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get isInCall =>
      (super.noSuchMethod(Invocation.getter(#isInCall), returnValue: false)
          as bool);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void registerCallStateListener(_i4.CallStateListener? listener) =>
      super.noSuchMethod(
        Invocation.method(#registerCallStateListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterCallStateListener(_i4.CallStateListener? listener) =>
      super.noSuchMethod(
        Invocation.method(#unregisterCallStateListener, [listener]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> startAudioCall(String? userId, String? userName) =>
      (super.noSuchMethod(
            Invocation.method(#startAudioCall, [userId, userName]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> startVideoCall(String? userId, String? userName) =>
      (super.noSuchMethod(
            Invocation.method(#startVideoCall, [userId, userName]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> answerCall() =>
      (super.noSuchMethod(
            Invocation.method(#answerCall, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> endCall() =>
      (super.noSuchMethod(
            Invocation.method(#endCall, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> declineCall() =>
      (super.noSuchMethod(
            Invocation.method(#declineCall, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.CallHistoryEntry>> getCallHistory(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getCallHistory, [userId]),
            returnValue: _i3.Future<List<_i4.CallHistoryEntry>>.value(
              <_i4.CallHistoryEntry>[],
            ),
          )
          as _i3.Future<List<_i4.CallHistoryEntry>>);

  @override
  void handleIncomingCall(
    String? callId,
    String? userId,
    String? userName,
    bool? isVideo,
  ) => super.noSuchMethod(
    Invocation.method(#handleIncomingCall, [callId, userId, userName, isVideo]),
    returnValueForMissingStub: null,
  );
}
